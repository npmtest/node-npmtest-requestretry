{"/home/travis/build/npmtest/node-npmtest-requestretry/test.js":"/* istanbul instrument in package npmtest_requestretry */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-requestretry/lib.npmtest_requestretry.js":"/* istanbul instrument in package npmtest_requestretry */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_requestretry = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_requestretry = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-requestretry/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-requestretry && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_requestretry */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_requestretry\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_requestretry.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_requestretry.rollup.js'] =\n            local.assetsDict['/assets.npmtest_requestretry.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_requestretry.__dirname + '/lib.npmtest_requestretry.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-requestretry/node_modules/requestretry/index.js":"'use strict';\n\n/*\n * Request\n *\n * Copyright(c) 2014 Francois-Guillaume Ribreau <npm@fgribreau.com>\n * MIT Licensed\n *\n */\nvar extend = require('extend');\nvar when = require('when');\nvar request = require('request');\nvar RetryStrategies = require('./strategies');\nvar _ = require('lodash');\n\nvar DEFAULTS = {\n  maxAttempts: 5, // try 5 times\n  retryDelay: 5000, // wait for 5s before trying again\n  fullResponse: true, // resolve promise with the full response object\n  promiseFactory: defaultPromiseFactory // Function to use a different promise implementation library\n};\n\n// Default promise factory which use bluebird\nfunction defaultPromiseFactory(resolver) {\n  return when.promise(resolver);\n}\n\n/**\n * It calls the promiseFactory function passing it the resolver for the promise\n *\n * @param {Object} requestInstance - The Request Retry instance\n * @param {Function} promiseFactoryFn - The Request Retry instance\n * @return {Object} - The promise instance\n */\nfunction makePromise(requestInstance, promiseFactoryFn) {\n\n  // Resolver function wich assigns the promise (resolve, reject) functions\n  // to the requestInstance\n  function Resolver(resolve, reject) {\n    this._resolve = resolve;\n    this._reject = reject;\n  }\n\n  return promiseFactoryFn(Resolver.bind(requestInstance));\n}\n\nfunction Request(url, options, f, retryConfig) {\n  // ('url')\n  if(_.isString(url)){\n    // ('url', f)\n    if(_.isFunction(options)){\n      f = options;\n    }\n\n    if(!_.isObject(options)){\n      options = {};\n    }\n\n    // ('url', {object})\n    options.url = url;\n  }\n\n  if(_.isObject(url)){\n    if(_.isFunction(options)){\n      f = options;\n    }\n    options = url;\n  }\n\n  this.maxAttempts = retryConfig.maxAttempts;\n  this.retryDelay = retryConfig.retryDelay;\n  this.fullResponse = retryConfig.fullResponse;\n  this.attempts = 0;\n\n  /**\n   * Option object\n   * @type {Object}\n   */\n  this.options = options;\n\n  /**\n   * Return true if the request should be retried\n   * @type {Function} (err, response) -> Boolean\n   */\n  this.retryStrategy = _.isFunction(options.retryStrategy) ? options.retryStrategy : RetryStrategies.HTTPOrNetworkError;\n\n  /**\n   * Return a number representing how long request-retry should wait before trying again the request\n   * @type {Boolean} (err, response, body) -> Number\n   */\n  this.delayStrategy = _.isFunction(options.delayStrategy) ? options.delayStrategy : function() { return this.retryDelay; };\n\n  this._timeout = null;\n  this._req = null;\n\n  this._callback = _.isFunction(f) ? _.once(f) : null;\n\n  // create the promise only when no callback was provided\n  if (!this._callback) {\n    this._promise = makePromise(this, retryConfig.promiseFactory);\n  }\n\n  this.reply = function requestRetryReply(err, response, body) {\n    if (this._callback) {\n      return this._callback(err, response, body);\n    }\n\n    if (err) {\n      return this._reject(err);\n    }\n\n    // resolve with the full response or just the body\n    response = this.fullResponse ? response : body;\n    this._resolve(response);\n  };\n}\n\nRequest.request = request;\n\nRequest.prototype._tryUntilFail = function () {\n  this.maxAttempts--;\n  this.attempts++;\n\n  this._req = Request.request(this.options, function (err, response, body) {\n    if (response) {\n      response.attempts = this.attempts;\n    }\n    if (this.retryStrategy(err, response, body) && this.maxAttempts > 0) {\n      this._timeout = setTimeout(this._tryUntilFail.bind(this), this.delayStrategy.call(this, err, response, body));\n      return;\n    }\n\n    this.reply(err, response, body);\n  }.bind(this));\n};\n\nRequest.prototype.abort = function () {\n  if (this._req) {\n    this._req.abort();\n  }\n  clearTimeout(this._timeout);\n  this.reply(new Error('Aborted'));\n};\n\n// expose request methods from RequestRetry\n['end', 'on', 'emit', 'once', 'setMaxListeners', 'start', 'removeListener', 'pipe', 'write'].forEach(function (requestMethod) {\n  Request.prototype[requestMethod] = function exposedRequestMethod () {\n    return this._req[requestMethod].apply(this._req, arguments);\n  };\n});\n\n// expose promise methods\n['then', 'catch', 'finally', 'fail', 'done'].forEach(function (promiseMethod) {\n  Request.prototype[promiseMethod] = function exposedPromiseMethod () {\n    if (this._callback) {\n      throw new Error('A callback was provided but waiting a promise, use only one pattern');\n    }\n    return this._promise[promiseMethod].apply(this._promise, arguments);\n  };\n});\n\nfunction Factory(url, options, f) {\n  var retryConfig = _.chain(_.isObject(url) ? url : options || {}).defaults(DEFAULTS).pick(Object.keys(DEFAULTS)).value();\n  var req = new Request(url, options, f, retryConfig);\n  req._tryUntilFail();\n  return req;\n}\n\n// adds a helper for HTTP method `verb` to object `obj`\nfunction makeHelper(obj, verb) {\n  obj[verb] = function helper(url, options, f) {\n    // ('url')\n    if(_.isString(url)){\n      // ('url', f)\n      if(_.isFunction(options)){\n        f = options;\n      }\n\n      if(!_.isObject(options)){\n        options = {};\n      }\n\n      // ('url', {object})\n      options.url = url;\n    }\n\n    if(_.isObject(url)){\n      if(_.isFunction(options)){\n        f = options;\n      }\n      options = url;\n    }\n\n    options.method = verb.toUpperCase();\n    return obj(options, f);\n  };\n}\n\nfunction defaults(defaultOptions, defaultF) {\n  var factory = function (options, f) {\n    if (typeof options === \"string\") {\n      options = { uri: options };\n    }\n    return Factory.apply(null, [ extend(true, {}, defaultOptions, options), f || defaultF ]);\n  };\n\n  factory.defaults = function (newDefaultOptions, newDefaultF) {\n    return defaults.apply(null, [ extend(true, {}, defaultOptions, newDefaultOptions), newDefaultF || defaultF ]);\n  };\n\n  factory.Request = Request;\n  factory.RetryStrategies = RetryStrategies;\n\n  ['get', 'head', 'post', 'put', 'patch', 'delete'].forEach(function (verb) {\n    makeHelper(factory, verb);\n  });\n  factory.del = factory['delete'];\n\n  return factory;\n}\n\nmodule.exports = Factory;\n\nFactory.defaults = defaults;\nFactory.Request = Request;\nFactory.RetryStrategies = RetryStrategies;\n\n// define .get/.post/... helpers\n['get', 'head', 'post', 'put', 'patch', 'delete'].forEach(function (verb) {\n  makeHelper(Factory, verb);\n});\nFactory.del = Factory['delete'];\n","/home/travis/build/npmtest/node-npmtest-requestretry/node_modules/requestretry/strategies/index.js":"'use strict';\nvar strategies = module.exports;\n\nstrategies.HTTPError = require('./HTTPError');\nstrategies.NetworkError = require('./NetworkError');\nstrategies.HTTPOrNetworkError = require('./HTTPOrNetworkError')(strategies.HTTPError, strategies.NetworkError);\n","/home/travis/build/npmtest/node-npmtest-requestretry/node_modules/requestretry/strategies/HTTPError.js":"'use strict';\n\n/**\n * @param  {Null | Object} err\n * @param  {Object} response\n * @return {Boolean} true if the request had a recoverable HTTP error\n */\nmodule.exports = function HTTPError(err, response) {\n  return response && 500 <= response.statusCode && response.statusCode < 600;\n};\n","/home/travis/build/npmtest/node-npmtest-requestretry/node_modules/requestretry/strategies/NetworkError.js":"'use strict';\n\nvar RETRIABLE_ERRORS = ['ECONNRESET', 'ENOTFOUND', 'ESOCKETTIMEDOUT', 'ETIMEDOUT', 'ECONNREFUSED', 'EHOSTUNREACH', 'EPIPE', 'EAI_AGAIN'];\nvar _ = require('lodash');\n\n/**\n * @param  {Null | Object} err\n * @param  {Object} response\n * @return {Boolean} true if the request had a network error\n */\nfunction NetworkError(err /*, response*/ ) {\n  return err && _.includes(RETRIABLE_ERRORS, err.code);\n}\n\nNetworkError.RETRIABLE_ERRORS = RETRIABLE_ERRORS;\nmodule.exports = NetworkError;\n","/home/travis/build/npmtest/node-npmtest-requestretry/node_modules/requestretry/strategies/HTTPOrNetworkError.js":"'use strict';\nmodule.exports = function HTTPOrNetworkError(httpError, networkError) {\n  /**\n   * @param  {Null | Object} err\n   * @param  {Object} response\n   * @return {Boolean} true if the request had a recoverable HTTP or network error\n   */\n  return function HTTPError(err, response) {\n    return httpError(err, response) || networkError(err, response);\n  };\n\n};\n"}